import { Request, Response } from "express";
import { RentService } from "../services/RentService";
import { AuthenticatedRequest } from "../types/AuthenticatedRequest";
import { PlaceService } from "../services/PlaceService";

const rentService = new RentService();
const placeService = new PlaceService();

export class RentController {
  // ðŸ”¹ Criar uma nova locaÃ§Ã£o
  async createRent(req: Request, res: Response) {
    try {
      const {
        placeId,
        ownerId,
        renterId,
        totalValue,
        status,
        paymentMethod,
        schedules, // Novo campo
      } = req.body;

      if (!schedules || !Array.isArray(schedules) || schedules.length === 0) {
        res
          .status(400)
          .json({ message: "Os horÃ¡rios da locaÃ§Ã£o sÃ£o obrigatÃ³rios." });
        return;
      }

      const rent = await rentService.createRent({
        placeId,
        ownerId,
        renterId,
        totalValue,
        status,
        paymentMethod,
        schedules,
      });

      res.status(201).json(rent);
      return;
    } catch (error: any) {
      res
        .status(500)
        .json({ message: "Erro ao criar locaÃ§Ã£o", error: error.message });
      return;
    }
  }

  // ðŸ”¹ Listar todas as locaÃ§Ãµes
  async getAllRents(req: Request, res: Response) {
    try {
      const rents = await rentService.getAllRents();
      res.json(rents);
      return;
    } catch (error: any) {
      res
        .status(500)
        .json({ message: "Erro ao obter locaÃ§Ãµes", error: error.message });
      return;
    }
  }

  // ðŸ”¹ Buscar locaÃ§Ã£o por ID
  async getRentById(req: Request, res: Response) {
    try {
      const { id } = req.params;
      const rent = await rentService.getRentById(id);

      if (!rent) {
        res.status(404).json({ message: "LocaÃ§Ã£o nÃ£o encontrada" });
        return;
      }

      res.json(rent);
    } catch (error: any) {
      res
        .status(500)
        .json({ message: "Erro ao obter locaÃ§Ã£o", error: error.message });
      return;
    }
  }

  // ðŸ”¹ Atualizar uma locaÃ§Ã£o por ID
  async updateRent(req: Request, res: Response) {
    try {
      const { id } = req.params;
      const updatedRent = await rentService.updateRent(id, req.body);

      if (!updatedRent) {
        res.status(404).json({ message: "LocaÃ§Ã£o nÃ£o encontrada" });
        return;
      }

      res.json(updatedRent);
    } catch (error: any) {
      res
        .status(500)
        .json({ message: "Erro ao atualizar locaÃ§Ã£o", error: error.message });
      return;
    }
  }

  // ðŸ”¹ Deletar uma locaÃ§Ã£o por ID
  async deleteRent(req: Request, res: Response) {
    try {
      const { id } = req.params;
      await rentService.deleteRent(id);
      res.json({ message: "LocaÃ§Ã£o deletada com sucesso" });
      return;
    } catch (error: any) {
      res
        .status(500)
        .json({ message: "Erro ao deletar locaÃ§Ã£o", error: error.message });
      return;
    }
  }

  // ðŸ”¹ Criar uma nova solicitaÃ§Ã£o de aluguel
  async requestRent(req: AuthenticatedRequest, res: Response) {
    try {
      const { placeId, schedules } = req.body;
      const renterId = req.user.id;

      // âœ… 1. Verifica se os horÃ¡rios foram fornecidos corretamente
      if (!schedules || !Array.isArray(schedules) || schedules.length === 0) {
        res
          .status(400)
          .json({ message: "Os horÃ¡rios da locaÃ§Ã£o sÃ£o obrigatÃ³rios." });
        return;
      }

      // âœ… 2. Verifica se o espaÃ§o existe e recupera o `ownerId`
      const place = await placeService.getPlaceById(placeId);
      if (!place) {
        res.status(404).json({ message: "EspaÃ§o nÃ£o encontrado." });
        return;
      }

      const ownerId = place.ownerId; // ðŸ”¹ ObtÃ©m o dono do espaÃ§o

      // âœ… 3. Calcula o total do aluguel com base na duraÃ§Ã£o e preÃ§o por hora
      let totalValue = 0;
      schedules.forEach((schedule: { startDate: string; endDate: string }) => {
        const startTime = new Date(schedule.startDate).getTime();
        const endTime = new Date(schedule.endDate).getTime();

        if (endTime <= startTime) {
          res.status(400).json({
            message: "Data de fim deve ser posterior Ã  data de inÃ­cio.",
          });
          return;
        }

        const durationInHours = (endTime - startTime) / (1000 * 60 * 60);
        totalValue += durationInHours * place.pricePerHour;
      });

      // âœ… 4. Cria a locaÃ§Ã£o com status pendente
      const rent = await rentService.createRent({
        placeId,
        ownerId, // ðŸ”¹ Agora incluÃ­mos `ownerId`
        renterId,
        status: "pendente",
        totalValue,
        paymentMethod: "nÃ£o definido",
        schedules,
      });

      res.status(201).json(rent);
      return;
    } catch (error: any) {
      res
        .status(500)
        .json({ message: "Erro ao solicitar aluguel", error: error.message });
      return;
    }
  }

  // ðŸ”¹ Aprovar ou negar uma solicitaÃ§Ã£o de aluguel
  async approveOrRejectRent(req: AuthenticatedRequest, res: Response) {
    try {
      const { id } = req.params;
      const { status } = req.body;

      if (!["approved", "rejected"].includes(status)) {
        res
          .status(400)
          .json({ message: "Status invÃ¡lido. Use 'approved' ou 'rejected'." });
        return;
      }

      const rent = await rentService.getRentById(id);

      if (!rent) {
        res.status(404).json({ message: "LocaÃ§Ã£o nÃ£o encontrada" });
        return;
      }

      if (rent.ownerId !== req.user.id) {
        res.status(403).json({
          message:
            "VocÃª nÃ£o tem permissÃ£o para aprovar ou rejeitar esta locaÃ§Ã£o.",
        });
        return;
      }

      const updatedRent = await rentService.updateRent(id, { status });

      res.json({
        message: `LocaÃ§Ã£o ${status} com sucesso.`,
        rent: updatedRent,
      });
      return;
    } catch (error: any) {
      res
        .status(500)
        .json({ message: "Erro ao processar locaÃ§Ã£o", error: error.message });
      return;
    }
  }

  // ðŸ”¹ Listar locaÃ§Ãµes do usuÃ¡rio (pendentes, futuras e finalizadas)
  async getUserRents(req: AuthenticatedRequest, res: Response) {
    try {
      const rents = await rentService.getRentsByUserId(req.user.id);
      res.json(rents);
      return;
    } catch (error: any) {
      res
        .status(500)
        .json({ message: "Erro ao obter locaÃ§Ãµes", error: error.message });
      return;
    }
  }

  async cancelRent(req: AuthenticatedRequest, res: Response) {
    try {
      const { id } = req.params;
      const rent = await rentService.getRentById(id);

      if (!rent) {
        res.status(404).json({ message: "LocaÃ§Ã£o nÃ£o encontrada." });
        return;
      }

      if (rent.renterId !== req.user.id) {
        res.status(403).json({
          message: "VocÃª nÃ£o tem permissÃ£o para cancelar esta locaÃ§Ã£o.",
        });
        return;
      }

      if (rent.status !== "pending") {
        res.status(400).json({
          message: "Somente locaÃ§Ãµes pendentes podem ser canceladas.",
        });
        return;
      }

      await rentService.deleteRent(id);

      res.json({ message: "LocaÃ§Ã£o cancelada com sucesso." });
      return;
    } catch (error: any) {
      res
        .status(500)
        .json({ message: "Erro ao cancelar locaÃ§Ã£o", error: error.message });
      return;
    }
  }
}
