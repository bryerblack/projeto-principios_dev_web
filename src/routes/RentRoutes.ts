import { Router } from "express";
import { RentController } from "../controllers/RentController";
import { authMiddleware } from "../middlewares/AuthMiddleware";
import { roleMiddleware } from "../middlewares/RoleMiddleware";

const router = Router();
const rentController = new RentController();

// ğŸ”¹ Listar places disponÃ­veis para aluguel com paginaÃ§Ã£o
router.get(
  "/available",
  rentController.getAvailablePlaces.bind(rentController)
);

// ğŸ”¹ UsuÃ¡rio pode solicitar um aluguel
router.post(
  "/request",
  authMiddleware,
  rentController.requestRent.bind(rentController)
);

router.put("/:id/finalize", authMiddleware, rentController.finalizeRent.bind(rentController));

// ğŸ”¹ Dono do espaÃ§o pode aprovar ou rejeitar solicitaÃ§Ã£o de aluguel
router.put(
  "/:id/approve",
  authMiddleware,
  rentController.approveOrRejectRent.bind(rentController)
);

// ğŸ”¹ UsuÃ¡rio autenticado pode visualizar suas locaÃ§Ãµes
router.get(
  "/me",
  authMiddleware,
  rentController.getUserRents.bind(rentController)
);

// ğŸ”¹ Criar aluguel diretamente (admin ou funcionalidade avanÃ§ada)
router.post(
  "/",
  authMiddleware,
  rentController.createRent.bind(rentController)
);

// ğŸ”¹ UsuÃ¡rio pode cancelar um aluguel prÃ³prio pendente
router.put(
  "/:id/cancel",
  authMiddleware,
  rentController.cancelRent.bind(rentController)
);

// ğŸ”¹ Atualizar locaÃ§Ã£o (por enquanto nÃ£o muito usado, mas mantido)
router.put(
  "/:id",
  authMiddleware,
  rentController.updateRent.bind(rentController)
);

// ğŸ”¹ Deletar locaÃ§Ã£o (geralmente sÃ³ admin)
router.delete(
  "/:id",
  authMiddleware,
  rentController.deleteRent.bind(rentController)
);

// ğŸ”¹ Apenas admin pode visualizar todas as locaÃ§Ãµes
router.get(
  "/",
  authMiddleware,
  roleMiddleware(["admin"]),
  rentController.getAllRents.bind(rentController)
);

// ğŸ”¹ Apenas admin pode visualizar uma locaÃ§Ã£o especÃ­fica
router.get(
  "/:id",
  authMiddleware,
  roleMiddleware(["admin"]),
  rentController.getRentById.bind(rentController)
);

export default router;
