import request from "supertest";
import sequelize from "../../config/database";
import app from "../../server";
import jwt from "jsonwebtoken";

describe("Testes da UserController", () => {
  let transaction: any;
  let adminToken: string;
  let adminId: string;

  beforeAll(async () => {
    await sequelize.sync({ force: true });

    // 游댳 Criar um usu치rio admin
    const adminResponse = await request(app).post("/auth/register").send({
      name: "Admin User",
      email: "admin@example.com",
      password: "admin123",
      phone: "(11) 98765-4321",
      profession: "Administrador",
      role: "admin",
    });

    adminId = adminResponse.body.user.id;

    // 游댳 Autenticar o admin e obter o token
    const loginResponse = await request(app).post("/auth/login").send({
      email: "admin@example.com",
      password: "admin123",
    });

    adminToken = loginResponse.body.token;
  });

  beforeEach(async () => {
    transaction = await sequelize.transaction();
  });

  afterEach(async () => {
    await transaction.rollback();
  });

  afterAll(async () => {
    await sequelize.close();
  });

  it("Deve criar um novo usu치rio e retornar c칩digo 201", async () => {
    const response = await request(app)
      .post("/users")
      .set("Authorization", `Bearer ${adminToken}`)
      .send({
        name: "Usu치rio Teste",
        email: "test1@example.com",
        password: "senha123",
        phone: "(11) 98765-4321",
        profession: "Engenheiro",
      });

    expect(response.status).toBe(201);
    expect(response.body).toHaveProperty("id");
    expect(response.body.email).toBe("test1@example.com");
  });

  it("N칚o deve criar usu치rio e deve retornar c칩digo 409 caso receba um email j치 cadastrado", async () => {
    await request(app)
      .post("/users")
      .set("Authorization", `Bearer ${adminToken}`)
      .send({
        name: "Usu치rio Teste",
        email: "test1@example.com",
        password: "senha123",
        phone: "(11) 98765-4321",
        profession: "Engenheiro",
      });

    const response = await request(app)
      .post("/users")
      .set("Authorization", `Bearer ${adminToken}`)
      .send({
        name: "Outro Usu치rio",
        email: "test1@example.com",
        password: "outrasenha",
        phone: "(11) 99999-8888",
        profession: "Advogado",
      });

    expect(response.status).toBe(409);
    expect(response.body.message).toBe("Email j치 cadastrado.");
  });

  it("Deve retornar todos os usu치rios com c칩digo 200", async () => {
    await request(app)
      .post("/users")
      .set("Authorization", `Bearer ${adminToken}`)
      .send({
        name: "Usu치rio 1",
        email: "usuario1@example.com",
        password: "senha123",
        phone: "(11) 98765-4321",
        profession: "M칠dico",
      });

    await request(app)
      .post("/users")
      .set("Authorization", `Bearer ${adminToken}`)
      .send({
        name: "Usu치rio 2",
        email: "usuario2@example.com",
        password: "senha456",
        phone: "(21) 99999-8888",
        profession: "Advogado",
      });

    const response = await request(app)
      .get("/users")
      .set("Authorization", `Bearer ${adminToken}`);

    expect(response.status).toBe(200);
    expect(response.body.length).toBeGreaterThan(1);
  });

  it("Deve retornar c칩digo 204 caso n칚o haja usu치rios", async () => {
    const response = await request(app)
      .get("/users")
      .set("Authorization", `Bearer ${adminToken}`);

    if (response.body.length === 0) {
      expect(response.status).toBe(204);
      expect(response.body.message).toBe("Nenhum usu치rio encontrado.");
    } else {
      expect(response.body.length > 0);
    }
  });

  it("Deve retornar usu치rio quando receber um ID v치lido", async () => {
    const user = await request(app)
      .post("/users")
      .set("Authorization", `Bearer ${adminToken}`)
      .send({
        name: "Usu치rio Teste",
        email: "usuario3@example.com",
        password: "senha123",
        phone: "(11) 98765-4321",
        profession: "Professor",
      });

    const response = await request(app)
      .get(`/users/${user.body.id}`)
      .set("Authorization", `Bearer ${adminToken}`);

    expect(response.status).toBe(200);
    expect(response.body).toHaveProperty("id");
    expect(response.body.email).toBe("usuario3@example.com");
  });

  it("Deve retornar c칩digo 404 caso o ID n칚o corresponda a um usu치rio existente", async () => {
    const response = await request(app)
      .get(`/users/123e4567-e89b-12d3-a456-426614174000`)
      .set("Authorization", `Bearer ${adminToken}`);

    expect(response.status).toBe(404);
    expect(response.body.message).toBe("Usu치rio n칚o encontrado.");
  });

  it("Deve deletar usu치rio com sucesso e retornar c칩digo 200", async () => {
    const user = await request(app)
      .post("/users")
      .set("Authorization", `Bearer ${adminToken}`)
      .send({
        name: "Usu치rio Teste",
        email: "usuario4@example.com",
        password: "senha123",
        phone: "(11) 98765-4321",
        profession: "Engenheiro",
      });

    const response = await request(app)
      .delete(`/users/${user.body.id}`)
      .set("Authorization", `Bearer ${adminToken}`);

    expect(response.status).toBe(200);
    expect(response.body.message).toBe("Usu치rio deletado com sucesso.");
  });

  it("Deve retornar c칩digo 404 caso tente deletar usu치rio inexistente", async () => {
    const response = await request(app)
      .delete(`/users/123e4567-e89b-12d3-a456-426614174000`)
      .set("Authorization", `Bearer ${adminToken}`);

    expect(response.status).toBe(404);
    expect(response.body.message).toBe("Usu치rio n칚o encontrado.");
  });

  it("Deve atualizar usu치rio e retornar c칩digo 200", async () => {
    const user = await request(app)
      .post("/users")
      .set("Authorization", `Bearer ${adminToken}`)
      .send({
        name: "Usu치rio Teste",
        email: "usuario5@example.com",
        password: "senha123",
        phone: "(11) 98765-4321",
        profession: "M칠dico",
      });

    const response = await request(app)
      .put(`/users/${user.body.id}`)
      .set("Authorization", `Bearer ${adminToken}`)
      .send({
        name: "Usu치rio Atualizado",
        phone: "(11) 99999-9999",
      });

    expect(response.status).toBe(200);
    expect(response.body.name).toBe("Usu치rio Atualizado");
    expect(response.body.phone).toBe("(11) 99999-9999");
  });

  it("Deve retornar c칩digo 404 ao tentar atualizar usu치rio inexistente", async () => {
    const response = await request(app)
      .put(`/users/123e4567-e89b-12d3-a456-426614174000`)
      .set("Authorization", `Bearer ${adminToken}`)
      .send({
        name: "Novo Nome",
      });

    expect(response.status).toBe(404);
    expect(response.body.message).toBe("Usu치rio n칚o encontrado.");
  });

  it("Deve retornar c칩digo 409 caso tente atualizar email j치 cadastrado", async () => {
    await request(app)
      .post("/users")
      .set("Authorization", `Bearer ${adminToken}`)
      .send({
        name: "Usu치rio 6",
        email: "usuario6@example.com",
        password: "senha123",
        phone: "(11) 98765-4321",
        profession: "M칠dico",
      });
      console.log(adminId)
    const response = await request(app)
      .put(`/users/${adminId}`)
      .set("Authorization", `Bearer ${adminToken}`)
      .send({ email: "usuario6@example.com" });

    expect(response.status).toBe(409);
    expect(response.body.message).toBe("Email j치 cadastrado.");
  });
});
